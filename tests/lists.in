tests:
    - car
    - cdr
    - cons
    - empty, testing if a list equals empty
    - recursion on lists

empty
(() ((())))

[cons 1 3]
(   
    cons
    (() ((()))())

    1
    ((()) ())

    2
    ((()) ()()())
)

cons 
(   
    cons
    (() ((()))())

    ((()) ()())

    (() ((())))
    
)

[define lst [1, 2, 3, 4]]

(
    define
    (() ()())
    lst
    (() (())(())(()))

    (   
        cons
        (() ((()))())
        1
        ((()) ())

        (   
            cons
            (() ((()))())
            2
            ((()) ()())

            (   
                cons
                (() ((()))())
                3
                ((()) ()()())

                (   
                    cons
                    (() ((()))())
                    4
                    ((()) ()()()())
                    empty
                    (() ((())))
                    
                )
                
            )
            
        )
        
    )
)

(() (())(())(()))

reduce-sum
(
    define
    (() ()())
    reduce-sum
    (() (())()(())())

    (   
        lambda
        (() ())

        lst
        ( (() (())()) )

        if list is empty return 0 else first + reduce[rest]
        (
            if
            (() ()()())

            [equal lst empty]
            (
                (() (())(()))

                (() (())())

                (() ((())))
            )

            0
            ((()) )

            first + reduce[rest]
            (   
                plus
                (() (()))

                (
                    first
                    (() ((()))(()))
                    lst
                    (() (())())
                )

                reduce-sum
                (
                    (() (())()(())())
                    (
                        rest
                        (() ((()))()())
                        lst
                        (() (())())
                    )
                )
            )
        )
    )
)

[reduce-sum lst]
(
    reduce-sum
    (() (())()(())())
    lst
    (() (())(())(()))
)